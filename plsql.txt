borrow and fine...

DECLARE
    v_roll_no Borrower.Rollin%TYPE;
    v_book_name Borrower.NameofBook%TYPE;
    v_date_of_issue Borrower.DateofIssue%TYPE;
    v_current_date DATE := SYSDATE;
    v_fine_amt NUMBER := 0;
    v_days_difference NUMBER;
BEGIN
    -- Accepting roll number and book name from user
    v_roll_no := &roll_no;
    v_book_name := '&book_name';

    -- Fetch the date of issue from the Borrower table
    SELECT DateofIssue
    INTO v_date_of_issue
    FROM Borrower
    WHERE Rollin = v_roll_no AND NameofBook = v_book_name;
    
    -- Calculate the difference in days between current date and date of issue
    v_days_difference := v_current_date - v_date_of_issue;
    
    -- Check fine conditions
    IF v_days_difference BETWEEN 15 AND 30 THEN
        v_fine_amt := v_days_difference * 5;
    ELSIF v_days_difference > 30 THEN
        v_fine_amt := v_days_difference * 50;
    ELSE
        v_fine_amt := 0;
    END IF;
    
    -- If fine amount is greater than 0, insert the fine details into Fine table
    IF v_fine_amt > 0 THEN
        INSERT INTO Fine (Roll_no, Date, Amt) 
        VALUES (v_roll_no, v_current_date, v_fine_amt);
    END IF;

    -- Update the Borrower table to change status to 'R' (Returned)
    UPDATE Borrower
    SET Status = 'R'
    WHERE Rollin = v_roll_no AND NameofBook = v_book_name;

    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Fine Amount: ' || v_fine_amt);
    DBMS_OUTPUT.PUT_LINE('Book status updated to Returned.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No record found for the given Roll Number and Book Name.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/





cursor ///


DECLARE
    CURSOR merge_cursor(p_table_name VARCHAR2) IS
        -- The parameterized cursor to fetch data from N_RollCall
        SELECT * 
        FROM N_RollCall 
        WHERE NOT EXISTS (
            SELECT 1 
            FROM O_RollCall 
            WHERE N_RollCall.Roll_no = O_RollCall.Roll_no
            AND N_RollCall.Date = O_RollCall.Date
        );

    -- Variable to hold the data fetched by cursor
    v_roll_no N_RollCall.Roll_no%TYPE;
    v_date N_RollCall.Date%TYPE;
    v_data_column1 N_RollCall.Data_Column1%TYPE;  -- Example for another column
    v_data_column2 N_RollCall.Data_Column2%TYPE;  -- Example for another column
BEGIN
    -- Open the cursor with the parameterized table name
    OPEN merge_cursor('N_RollCall');
    
    LOOP
        FETCH merge_cursor INTO v_roll_no, v_date, v_data_column1, v_data_column2;
        EXIT WHEN merge_cursor%NOTFOUND;
        
        -- Insert into O_RollCall only if the data does not already exist
        INSERT INTO O_RollCall (Roll_no, Date, Data_Column1, Data_Column2)
        VALUES (v_roll_no, v_date, v_data_column1, v_data_column2);
        
    END LOOP;

    -- Commit the changes
    COMMIT;
    
    -- Close the cursor
    CLOSE merge_cursor;

    DBMS_OUTPUT.PUT_LINE('Data merged successfully.');
EXCEPTION
    WHEN OTHERS THEN
        -- Handle exceptions
        DBMS_OUTPUT.PUT_LINE('Error occurred: ' || SQLERRM);
        ROLLBACK;
END;
/



procedure ///



 -- Stud_Marks table
CREATE TABLE Stud_Marks (
name VARCHAR2(100),
total_marks NUMBER
);

-- Result table
CREATE TABLE Result (
roll NUMBER PRIMARY KEY,
name VARCHAR2(100),
class VARCHAR2(50)
);

CREATE OR REPLACE PROCEDURE proc_Grade (
p_name IN VARCHAR2,
p_total_marks IN NUMBER
) IS
v_class VARCHAR2(50);
BEGIN
  IF p_total_marks >= 990 AND p_total_marks <= 1500 THEN
    v_class := 'Distinction';
  ELSIF p_total_marks >= 900 AND p_total_marks < 990 THEN
    v_class := 'First Class';
  ELSIF p_total_marks >= 825 AND p_total_marks < 900 THEN
    v_class := 'Higher Second Class';
  ELSE
    v_class := 'No Category';
  END IF;

 INSERT INTO Result (roll, name, class)
 VALUES ((SELECT NVL(MAX(roll), 0) + 1 FROM Result), p_name, v_class);
END;
/


DECLARE
  CURSOR c_stud_marks IS
    SELECT name, total_marks FROM Stud_Marks;
  v_name Stud_Marks.name%TYPE;
  v_total_marks Stud_Marks.total_marks%TYPE;
BEGIN 
  OPEN c_stud_marks;
  LOOP
    FETCH c_stud_marks INTO v_name, v_total_marks;
    EXIT WHEN c_stud_marks%NOTFOUND;
    proc_Grade(v_name, v_total_marks);
  END LOOP;
  CLOSE c_stud_marks;
END;
/
-- data 
INSERT INTO Stud_Marks (name, total_marks) VALUES ('A', 1000);
INSERT INTO Stud_Marks (name, total_marks) VALUES ('B', 950);
INSERT INTO Stud_Marks (name, total_marks) VALUES ('C', 850);
INSERT INTO Stud_Marks (name, total_marks) VALUES ('D', 800);


COMMIT;






trigger







CREATE TABLE Library_Audit (
    Audit_ID INT AUTO_INCREMENT PRIMARY KEY,
    Action_Type VARCHAR(20),      -- The type of action (UPDATE/DELETE)
    Book_ID INT,                  -- Book ID from the Library table
    Book_Name VARCHAR(255),       -- Old book name
    Author VARCHAR(255),          -- Old author name
    Issue_Date DATE,              -- Old issue date
    Status VARCHAR(20),           -- Old status
    Action_Timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Time of action
);


DELIMITER $$

CREATE TRIGGER Library_Audit_Trigger
AFTER UPDATE ON Library
FOR EACH ROW
BEGIN
    -- If the record is being updated, store the old values in Library_Audit
    INSERT INTO Library_Audit (Action_Type, Book_ID, Book_Name, Author, Issue_Date, Status)
    VALUES ('UPDATE', OLD.Book_ID, OLD.Book_Name, OLD.Author, OLD.Issue_Date, OLD.Status);
END $$

CREATE TRIGGER Library_Audit_Delete_Trigger
AFTER DELETE ON Library
FOR EACH ROW
BEGIN
    -- If the record is being deleted, store the old values in Library_Audit
    INSERT INTO Library_Audit (Action_Type, Book_ID, Book_Name, Author, Issue_Date, Status)
    VALUES ('DELETE', OLD.Book_ID, OLD.Book_Name, OLD.Author, OLD.Issue_Date, OLD.Status);
END $$

DELIMITER ;


UPDATE Library
SET Book_Name = 'New Book Name'
WHERE Book_ID = 1;


DELETE FROM Library
WHERE Book_ID = 2;


SELECT * FROM Library_Audit;

